#summary yappi Usage Manual

= Reference Manual =

----

*Latest version: 0.82*

<font face='Courier New'>
yappi.<b>start</b>(builtins=False, profile_threads=True)
</font>

_Remarks:_

Starts profiling all threads in the current interpreter instance. This function can be called from any thread at any time.  

Yappi is per-interpreter resource, you cannot run more than one instance per-interpreter. A relevant exception will be raised if you do so.

Resumes profiling if stop() is called previously.(Note: you can clear the profiling stats via clear_stats() between  start()/stop().)

_Params:_

*builtins*: Profile builtin functions used by standart Python modules. It is _False_ by _default_.
*profile_threads*: Profile all of the threads if 'true', else, profile only the calling thread. 
----

<font face='Courier New'>
yappi.<b>stop</b>()
</font>

_Remarks:_

Stops the currently running yappi instance. Same profiling session might be resumed later by calling start().

<font face='Courier New'>
yappi.<b>clear_stats</b>()
</font>

_Remarks:_

Clears the profiler results. The results stays in memory unless application(all threads including the main thread) exists or clear_stats() is called.

----

<font face='Courier New'>
yappi.<b>is_running</b>()
</font>

_Remarks:_

Returns a boolean indicating whether profiler is running or not.

----

<font face='Courier New'>
yappi.<b>get_clock_type</b>()
</font>

_Remarks:_

Returns information about the underlying clock type Yappi uses to measure timing.

{{{
'''
Example on windows:
'''
>>> import yappi
>>> yappi.get_clock_type()
{'resolution': '100ns', 'api': 'getthreadtimes', 'type': 'cpu'}
>>>
}}}

----

<font face='Courier New'>
yappi.<b>set_clock_type</b>(type)
</font>

_Remarks:_

Sets the underlying clock type. 'type' can be either <b>WALL</b> or <b>CPU</b>.

----

<font face='Courier New'>
yappi.<b>get_mem_usage</b>(type)
</font>

_Remarks:_

Returns the internal memory usage of the profiler itself.