v0.2
---------
[+] 8 multithreading related issues/bugs are fixed.
[+] 1 memory leak(reference leak) bug fixed.
[+] add a get_stats() function to retrieve statictics as a list. Sorting order and sorting column and result limit can be adjusted via this new	function.
[+] static pool and list can be adjusted at compile time.
[+] Robustness: Memory Allocation/OS/Python VM related error(s) should be propagated to the application, profiler should be as transparent as possible.
v0.3
---------
[+] yappi did not compile out of box on VS2008. Fix the compile issues. (Thanks to Kevin Watters)
[+] tidy up stat formatting code. that's previously messy.
[+] BUGFIX:application total time is calculated wrong. 
[+] BUGFIX:change some int's to long long's to prevent simple integer overflows.
[+] show profiler status.
[+] show memory usage of the yappi itself.
[+] show thread class name in the thread stats.
[+] make thread/profiler stats column separated.
[+] big endian support for core hash function.
[+] BUGFIX: CURRENTCTX macro can return NULL on rare occassions, handle that.
[+] BUGFIX: Shows wrong thread class name as we call it in the profile_thread.
[+] OPTIMIZATION:some hashtable enhancements are done.
v0.42
-----
[+] FIXED: Internal hash table grow leads mem corruption on i686 machines.
[+] FIXED: Long function names leads to mem corruption in.
[+] FIXED: setup related problems.
[+] FIXED:when builtin functions isnot profiled, the parent callers of them might have
	got invalid time calculations, especially if the builtin is a blocking call.
[+] FIXED: Issue #10. Package cannot be built on MACOSX when DEBUG_MEM option is specified
	in compile args.
v0.43
-----
[+] FIXED:OPTIMIZATION: Issue #11: yappi overhead caculation code decrease profiler runtime by 2x-3x. Removed the
                   overhead and yappi now runs the 1.1x times of the Python cProfile profiler even with
                   single-threaded CPU insentive applications in which cProfile is aimed for.
[+] OPTIMIZATION:  Issue #11: Added timing_sample value to yappi.start() function. This param can be used
				   further to decrease profiler runtime by giving away timing accuracy. On every timing_sample
				   value timing measurements will be done, other times yappi will use a previous timing sample 
				   of the same function. There is no universal value for this param, just profile your own 
				   application and select the best value that suits you as the tradeoff is very application 
				   dependant. However, bigger params can make spped up profiler runtime by 2x-3x!
[+] FIXED: Hash table free algorithm do not recycle free nodes when two recursive functions called subsequently.
           This may lead to exponantial ttotal calculation of a function.
[+] FIXED: Issue #13: Fixed to show the year time of the profiler start time.
[+] FIXED: Issue #12: _callstack.c file does not compile on MSVC compiler.
[+] OPTIMIZATION: Change _ystatic.h.Tune static mem pools for internal hash tables
                  and call stack.
v0.51
-----
[+] 2.6.5 gives import _yappi Dll load failed error.
	This is due to VC2008 compile. Unfortunately, we need to use VC Express
	Mingw is not working because of MSVCR dll files on 2.6.5 on some machines.
[+] Use snprintf for stat handling code. There may be some buffer overflow situations.
	Use PyOS_snprintf for platform differences. (Thanks to Dave Peticolas)
[+] Format stat STRINGs from left, instead of right. (Thanks to Dave Peticolas)
[+] OPTIMIZATION:Move ctx calculation code to callback function. Optimize call_XXX
	functions as much as possible.
[+] OPTIMIZATION:Use per-pit cpc for better accuracy in different timing_sample values.
	Now timing_sample is not linearly decreasing the timing accuracy for most of the 
	applications tested. We reduced the runtime of the profiler from 3.2 secs to 0.7
	by giving away ~%2 timing accuracy. This means yappi can now run 4x-7x times faster
	than the standart cProfile by increasing timing_sample values with very little accuracy
	defect.
[+] Move timing calculation code from header to the C file.
[+] MACRO defining code in setup.py is broken for some compilers, use DEFINE_MACRO
	keyword.
[+] OPTIMIZATION:Disable HASH table linked list swapping code, it is not adapting to the 
	profiler nature very well. Rollback to simple hash-table-bucketing.
v0.52 (Beta period is over)
-----
[+] Some class methods hash into same slot which leads to inaccurate profiling information.